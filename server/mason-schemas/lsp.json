[{"id":"java-startup","properties":{"java.jdt.ls.androidSupport.enabled":{"type":"string","markdownDescription":"[Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.\n\n**Note:** Only works for Android Gradle Plugin `3.2.0` or higher.","default":"auto","enum":["auto","on","off"],"scope":"window","order":90},"java.jdt.ls.javac.enabled":{"type":"string","markdownDescription":"[Experimental] Specify whether to enable Javac-based compilation in the language server. Requires running this extension with Java 23","default":"off","enum":["on","off"],"scope":"window","order":95},"java.trace.server":{"type":"string","default":"off","enum":["off","messages","verbose"],"scope":"window","description":"Traces the communication between VS Code and the Java language server."},"redhat.telemetry.enabled":{"type":"boolean","markdownDescription":"Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https:\/\/developers.redhat.com\/article\/tool-data-collection).","tags":["usesOnlineServices","telemetry"],"default":null,"scope":"window"},"java.server.launchMode":{"type":"string","order":30,"default":"Hybrid","enumDescriptions":["Provides full features such as intellisense, refactoring, building, Maven\/Gradle support etc.","Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.","Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready."],"enum":["Standard","LightWeight","Hybrid"],"scope":"window","description":"The launch mode for the Java extension"},"java.sharedIndexes.enabled":{"type":"string","markdownDescription":"[Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.","default":"auto","enum":["auto","on","off"],"scope":"window","order":50},"java.jdt.ls.protobufSupport.enabled":{"type":"boolean","markdownDescription":"Specify whether to automatically add Protobuf output source directories to the classpath.\n\n**Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.","default":true,"scope":"window","order":80},"java.jdt.ls.vmargs":{"type":["string","null"],"default":"-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable","order":20,"scope":"machine-overridable","description":"Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector"},"java.sharedIndexes.location":{"type":"string","markdownDescription":"Specifies a common index location for all workspaces. See default values as follows:\n \nWindows: First use `\"$APPDATA\\\\.jdt\\\\index\"`, or `\"~\\\\.jdt\\\\index\"` if it does not exist\n \nmacOS: `\"~\/Library\/Caches\/.jdt\/index\"`\n \nLinux: First use `\"$XDG_CACHE_HOME\/.jdt\/index\"`, or `\"~\/.cache\/.jdt\/index\"` if it does not exist","default":"","scope":"window","order":60},"java.jdt.ls.java.home":{"type":["string","null"],"default":null,"order":10,"scope":"machine-overridable","description":"Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. \n\nOn Windows, backslashes must be escaped, i.e.\n\"java.jdt.ls.java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk-21.0_5\""},"java.jdt.ls.lombokSupport.enabled":{"type":"boolean","default":true,"order":70,"scope":"window","description":"Whether to load lombok processors from project classpath"},"java.home":{"type":["string","null"],"deprecationMessage":"This setting is deprecated, please use 'java.jdt.ls.java.home' instead.","default":null,"order":0,"scope":"machine-overridable","description":"Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server.\nOn Windows, backslashes must be escaped, i.e.\n\"java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk-21.0_5\""},"java.configuration.workspaceCacheLimit":{"type":["null","integer"],"default":90,"order":40,"minimum":1,"scope":"application","description":"The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed."}},"order":10,"title":"Startup"},{"id":"java-projectimport","properties":{"java.import.generatesMetadataFilesAtProjectRoot":{"type":"boolean","markdownDescription":"Specify whether the project metadata files(.project, .classpath, .factorypath, .settings\/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.","scope":"window","default":false},"java.project.importOnFirstTimeStartup":{"type":"string","default":"automatic","enum":["disabled","interactive","automatic"],"scope":"application","description":"Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time."},"java.import.exclusions":{"type":"array","default":["**\/node_modules\/**","**\/.metadata\/**","**\/archetype-resources\/**","**\/META-INF\/maven\/**"],"scope":"window","description":"Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important."},"java.project.importHint":{"type":"boolean","default":true,"scope":"application","description":"Enable\/disable the server-mode switch information, when Java projects import is skipped on startup."},"java.showBuildStatusOnStart.enabled":{"default":"notification","anyOf":[{"enumDescriptions":["Show the build status via progress notification on start","Show the build status via terminal on start","Do not show any build status on start"],"enum":["notification","terminal","off"]},"boolean"],"scope":"window","description":"Automatically show build status on startup."},"java.project.resourceFilters":{"type":"array","markdownDescription":"Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, [\"node_modules\",\"\\.git\"] will exclude all files and folders named `node_modules` or `.git`. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to [\"node_modules\",\"\\.git\"].","default":["node_modules","\\.git"],"items":{"type":"string","pattern":"^(?!\\*).*"},"scope":"window"},"java.project.encoding":{"enumDescriptions":["Ignore project encoding settings","Show warning if a project has no explicit encoding set","Set the default workspace encoding settings"],"markdownDescription":"Project encoding settings","default":"ignore","enum":["ignore","warning","setDefault"],"scope":"window"},"java.import.projectSelection":{"type":"string","markdownDescription":"[Experimental] Specifies how to select build configuration files to import. \nNote: Currently, `Gradle` projects cannot be partially imported.","default":"automatic","order":10,"enum":["manual","automatic"],"scope":"window","enumDescriptions":["Manually select the build configuration files.","Let extension automatically scan and select the build configuration files."]},"java.configuration.updateBuildConfiguration":{"type":["string"],"default":"interactive","order":20,"enum":["disabled","interactive","automatic"],"scope":"window","description":"Specifies how modifications on build files update the Java classpath\/configuration"},"java.configuration.checkProjectSettingsExclusions":{"type":"boolean","deprecationMessage":"Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.","default":false,"scope":"window","description":"Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings\/) from the file explorer."}},"order":20,"title":"Project Import\/Update"},{"id":"java-unmanagedfolder","properties":{"java.project.outputPath":{"type":["string","null"],"markdownDescription":"A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.","default":"","scope":"window","order":20},"java.project.referencedLibraries":{"type":["array","object"],"properties":{"sources":{"type":"object"},"exclude":{"type":"array"},"include":{"type":"array"}},"order":30,"default":["lib\/**\/*.jar"],"required":["include"],"additionalProperties":false,"scope":"window","description":"Configure glob patterns for referencing local libraries to a Java project."},"java.project.sourcePaths":{"type":"array","markdownDescription":"Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.","default":[],"order":10,"items":{"type":"string"},"scope":"window"}},"order":30,"title":"Unmanaged Folder"},{"id":"java-maven","properties":{"java.import.maven.enabled":{"type":"boolean","default":true,"order":10,"scope":"window","description":"Enable\/disable the Maven importer."},"java.import.maven.offline.enabled":{"type":"boolean","default":false,"order":20,"scope":"window","description":"Enable\/disable the Maven offline mode."},"java.import.maven.disableTestClasspathFlag":{"type":"boolean","default":false,"order":30,"scope":"window","description":"Enable\/disable test classpath segregation. When enabled, this permits the usage of test resources within a Maven project as dependencies within the compile scope of other projects."},"java.maven.downloadSources":{"type":"boolean","default":false,"order":40,"scope":"window","description":"Enable\/disable download of Maven source artifacts as part of importing Maven projects."},"java.maven.updateSnapshots":{"type":"boolean","default":false,"order":50,"scope":"window","description":"Force update of Snapshots\/Releases."},"java.configuration.maven.userSettings":{"type":"string","default":null,"order":60,"scope":"window","description":"Path to Maven's user settings.xml"},"java.configuration.maven.lifecycleMappings":{"type":"string","default":null,"order":100,"scope":"window","description":"Path to Maven's lifecycle mappings xml"},"java.configuration.maven.globalSettings":{"type":"string","default":null,"order":70,"scope":"window","description":"Path to Maven's global settings.xml"},"java.configuration.maven.defaultMojoExecutionAction":{"type":"string","default":"ignore","order":90,"enum":["ignore","warn","error","execute"],"scope":"window","description":"Specifies default mojo execution action when no associated metadata can be detected."},"java.configuration.maven.notCoveredPluginExecutionSeverity":{"type":"string","default":"warning","order":80,"enum":["ignore","warning","error"],"scope":"window","description":"Specifies severity if the plugin execution is not covered by Maven build lifecycle."}},"order":40,"title":"Maven"},{"id":"java-gradle","properties":{"java.import.gradle.offline.enabled":{"type":"boolean","default":false,"order":60,"scope":"window","description":"Enable\/disable the Gradle offline mode."},"java.import.gradle.java.home":{"type":"string","default":null,"order":50,"scope":"machine-overridable","description":"The location to the JVM used to run the Gradle daemon."},"java.import.gradle.home":{"type":"string","default":null,"order":40,"scope":"machine-overridable","description":"Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified."},"java.import.gradle.jvmArguments":{"type":"string","default":null,"order":80,"scope":"machine","description":"JVM arguments to pass to Gradle."},"java.import.gradle.enabled":{"type":"boolean","default":true,"order":10,"scope":"window","description":"Enable\/disable the Gradle importer."},"java.import.gradle.annotationProcessing.enabled":{"type":"boolean","default":true,"order":90,"scope":"window","description":"Enable\/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher."},"java.import.gradle.wrapper.enabled":{"type":"boolean","default":true,"order":20,"scope":"window","description":"Use Gradle from the 'gradle-wrapper.properties' file."},"java.imports.gradle.wrapper.checksums":{"type":"array","default":[],"scope":"application","items":{"type":"object","properties":{"sha256":{"type":"string","label":"SHA-256 checksum."},"allowed":{"type":"boolean","label":"Is allowed?","default":true}},"default":{},"uniqueItems":true,"required":["sha256"],"additionalProperties":false},"description":"Defines allowed\/disallowed SHA-256 checksums of Gradle Wrappers"},"java.import.gradle.version":{"type":"string","default":null,"order":30,"scope":"window","description":"Use Gradle from the specific version if the Gradle wrapper is missing or disabled."},"java.import.gradle.user.home":{"type":"string","default":null,"order":55,"scope":"machine-overridable","description":"Setting for GRADLE_USER_HOME."},"java.import.gradle.arguments":{"type":"string","default":null,"order":70,"scope":"machine","description":"Arguments to pass to Gradle."}},"order":50,"title":"Gradle"},{"id":"java-build","properties":{"java.autobuild.enabled":{"type":"boolean","default":true,"order":10,"scope":"window","description":"Enable\/disable the 'auto build'"},"java.compile.nullAnalysis.nonnullbydefault":{"type":"array","markdownDescription":"Specify the NonNullByDefault annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`","scope":"window","default":["javax.annotation.ParametersAreNonnullByDefault","org.eclipse.jdt.annotation.NonNullByDefault","org.springframework.lang.NonNullApi"]},"java.maxConcurrentBuilds":{"type":"integer","default":1,"order":20,"minimum":1,"scope":"window","description":"Max simultaneous project builds"},"java.compile.nullAnalysis.nullable":{"type":"array","markdownDescription":"Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`","scope":"window","default":["javax.annotation.Nullable","org.eclipse.jdt.annotation.Nullable","org.springframework.lang.Nullable"]},"java.settings.url":{"type":"string","markdownDescription":"Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https:\/\/github.com\/redhat-developer\/vscode-java\/wiki\/Settings-Global-Preferences)","default":null,"scope":"window","order":30},"java.compile.nullAnalysis.mode":{"type":"string","markdownDescription":"Specify how to enable the annotation-based null analysis.","default":"interactive","enum":["disabled","interactive","automatic"],"scope":"window"},"java.compile.nullAnalysis.nonnull":{"type":"array","markdownDescription":"Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`","scope":"window","default":["javax.annotation.Nonnull","org.eclipse.jdt.annotation.NonNull","org.springframework.lang.NonNull"]},"java.errors.incompleteClasspath.severity":{"type":["string"],"default":"warning","enum":["ignore","info","warning","error"],"scope":"window","description":"Specifies the severity of the message when the classpath is incomplete for a Java file"}},"order":60,"title":"Build"},{"id":"java-jdks","properties":{"java.configuration.runtimes":{"type":"array","default":[],"scope":"machine-overridable","items":{"type":"object","properties":{"name":{"type":"string","enum":["J2SE-1.5","JavaSE-1.6","JavaSE-1.7","JavaSE-1.8","JavaSE-9","JavaSE-10","JavaSE-11","JavaSE-12","JavaSE-13","JavaSE-14","JavaSE-15","JavaSE-16","JavaSE-17","JavaSE-18","JavaSE-19","JavaSE-20","JavaSE-21","JavaSE-22","JavaSE-23"],"description":"Java Execution Environment name. Must be unique."},"javadoc":{"type":"string","description":"JDK javadoc path."},"sources":{"type":"string","description":"JDK sources path."},"default":{"type":"boolean","description":"Is default runtime? Only one runtime can be default."},"path":{"type":"string","pattern":".*(?<!\\\/bin|\\\/bin\\\/|\\\\bin|\\\\bin\\\\)$","description":"JDK home path. Should be the JDK installation directory, not the Java bin path.\n On Windows, backslashes must be escaped, i.e.\n\"path\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\"."}},"default":{},"required":["path","name"],"additionalProperties":false},"description":"Map Java Execution Environments to local JDKs."},"java.configuration.detectJdksAtStart":{"type":"boolean","markdownDescription":"Automatically detect JDKs installed on local machine at startup. If you have specified the same JDK version in `#java.configuration.runtimes#`, the extension will use that version first.","default":true}},"order":70,"title":"Installed JDKs"},{"id":"java-formatting","properties":{"java.format.comments.enabled":{"type":"boolean","default":true,"scope":"window","description":"Includes the comments during code formatting."},"java.format.enabled":{"type":"boolean","default":true,"order":10,"scope":"window","description":"Enable\/disable default Java formatter"},"java.format.settings.url":{"type":"string","markdownDescription":"Specifies the url or file path to the [Eclipse formatter xml settings](https:\/\/github.com\/redhat-developer\/vscode-java\/wiki\/Formatter-settings).","default":null,"scope":"window","order":20},"java.format.settings.profile":{"type":"string","default":null,"order":30,"scope":"window","description":"Optional formatter profile name from the Eclipse formatter settings."},"java.format.onType.enabled":{"type":"boolean","default":true,"scope":"window","description":"Enable\/disable automatic block formatting when typing `;`, `<enter>` or `}`"}},"order":80,"title":"Formatting"},{"id":"java-codecompletion","properties":{"java.completion.chain.enabled":{"type":"boolean","markdownDescription":"Enable\/disable chain completion support. Chain completions are only available when completions are invoked by the completions shortcut","default":false,"scope":"window","order":30},"java.completion.favoriteStaticMembers":{"type":"array","default":["org.junit.Assert.*","org.junit.Assume.*","org.junit.jupiter.api.Assertions.*","org.junit.jupiter.api.Assumptions.*","org.junit.jupiter.api.DynamicContainer.*","org.junit.jupiter.api.DynamicTest.*","org.mockito.Mockito.*","org.mockito.ArgumentMatchers.*","org.mockito.Answers.*"],"order":40,"scope":"window","description":"Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing."},"java.completion.collapseCompletionItems":{"type":"boolean","markdownDescription":"Enable\/disable the collapse of overloaded methods in completion items. Overrides `#java.completion.guessMethodArguments#`.","scope":"window","default":false},"java.completion.filteredTypes":{"type":"array","default":["java.awt.*","com.sun.*","sun.*","jdk.*","org.graalvm.*","io.micrometer.shaded.*"],"order":50,"scope":"window","description":"Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages."},"java.completion.guessMethodArguments":{"type":["boolean","string"],"order":60,"default":"auto","enumDescriptions":["Use 'off' only when using Visual Studio Code - Insiders, other platform will defaults to 'insertBestGuessedArguments'.","Method arguments will not be inserted during completion.","The parameter names will be inserted during completion.","The best guessed arguments will be inserted during completion according to the code context."],"enum":["auto","off","insertParameterNames","insertBestGuessedArguments"],"scope":"window","description":"Specify how the arguments will be filled during completion."},"java.completion.lazyResolveTextEdit.enabled":{"type":"boolean","description":"[Experimental] Enable\/disable lazily resolving text edits for code completion.","scope":"window","default":true},"java.completion.engine":{"type":"string","order":1000,"default":"ecj","markdownEnumDescriptions":["Use ECJ-based code completion engine (default)","Use (highly experimental) JDT DOM-based code completion engine (requires `java.jdt.ls.javac.enabled` to be `on`)"],"enum":["ecj","dom"],"scope":"window","description":"[Experimental] Select code completion engine"},"java.completion.maxResults":{"type":"integer","markdownDescription":"Maximum number of completion results (not including snippets).\n`0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.","scope":"window","default":0},"java.signatureHelp.enabled":{"type":"boolean","description":"Enable\/disable the signature help.","scope":"window","default":true},"java.completion.importOrder":{"type":"array","default":["#","java","javax","org","com",""],"order":80,"scope":"window","description":"Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'"},"java.signatureHelp.description.enabled":{"type":"boolean","description":"Enable\/disable to show the description in signature help.","scope":"window","default":false},"java.completion.enabled":{"type":"boolean","default":true,"order":10,"scope":"window","description":"Enable\/disable code completion support"},"java.completion.matchCase":{"type":"string","markdownDescription":"Specify whether to match case for code completion.","default":"firstLetter","order":70,"enum":["firstLetter","off"],"scope":"window","enumDescriptions":["Match case for the first letter when doing completion.","Do not match case when doing completion."]},"java.completion.postfix.enabled":{"type":"boolean","markdownDescription":"Enable\/disable postfix completion support. `#editor.snippetSuggestions#` can be used to customize how postfix snippets are sorted.","default":true,"scope":"window","order":20}},"order":90,"title":"Code Completion"},{"id":"java-codegeneration","properties":{"java.codeGeneration.toString.codeStyle":{"type":"string","default":"STRING_CONCATENATION","enum":["STRING_CONCATENATION","STRING_BUILDER","STRING_BUILDER_CHAINED","STRING_FORMAT"],"enumDescriptions":["String concatenation","StringBuilder\/StringBuffer","StringBuilder\/StringBuffer - chained call","String.format\/MessageFormat"],"description":"The code style for generating the toString method."},"java.templates.fileHeader":{"type":"array","markdownDescription":"Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).","default":[],"scope":"window","order":10},"java.templates.typeComment":{"type":"array","markdownDescription":"Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).","default":[],"scope":"window","order":20},"java.codeGeneration.hashCodeEquals.useJava7Objects":{"type":"boolean","default":false,"scope":"window","description":"Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher."},"java.codeGeneration.insertionLocation":{"type":"string","order":30,"default":"afterCursor","enumDescriptions":["Insert the generated code after the member where the cursor is located.","Insert the generated code before the member where the cursor is located.","Insert the generated code as the last member of the target type."],"enum":["afterCursor","beforeCursor","lastMember"],"scope":"window","description":"Specifies the insertion location of the code generated by source actions."},"java.codeGeneration.hashCodeEquals.useInstanceof":{"type":"boolean","default":false,"scope":"window","description":"Use 'instanceof' to compare types when generating the hashCode and equals methods."},"java.edit.smartSemicolonDetection.enabled":{"type":"boolean","markdownDescription":"Defines the `smart semicolon` detection. Defaults to `false`.","scope":"window","default":false},"java.codeGeneration.useBlocks":{"type":"boolean","default":false,"scope":"window","description":"Use blocks in 'if' statements when generating the methods."},"java.codeGeneration.toString.skipNullValues":{"type":"boolean","default":false,"scope":"window","description":"Skip null values when generating the toString method."},"java.codeGeneration.generateComments":{"type":"boolean","default":false,"scope":"window","description":"Generate method comments when generating the methods."},"java.codeGeneration.toString.listArrayContents":{"type":"boolean","default":true,"scope":"window","description":"List contents of arrays instead of using native toString()."},"java.codeGeneration.toString.template":{"type":"string","default":"${object.className} [${member.name()}=${member.value}, ${otherMembers}]","description":"The template for generating the toString method."},"java.codeGeneration.addFinalForNewDeclaration":{"type":"string","default":"none","enumDescriptions":["Do not generate final modifier.","Generate 'final' modifier only for new field declarations.","Generate 'final' modifier only for new variable declarations.","Generate 'final' modifier for all new declarations."],"enum":["none","fields","variables","all"],"scope":"window","description":"Whether to generate the 'final' modifer for code actions that create new declarations."},"java.codeGeneration.toString.limitElements":{"type":"integer","default":0,"scope":"window","description":"Limit number of items in arrays\/collections\/maps to list, if 0 then list all."}},"order":100,"title":"Code Generation"},{"id":"java-codeaction","properties":{"java.codeAction.sortMembers.avoidVolatileChanges":{"type":"boolean","description":"Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.","scope":"window","default":true},"java.cleanup.actions":{"type":"array","markdownDescription":"The list of clean ups to be run on the current document when it's saved or when the cleanup command is issued. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.","default":["renameFileToType"],"order":10,"items":{"type":"string","enum":["qualifyMembers","qualifyStaticMembers","addOverride","addDeprecated","stringConcatToTextBlock","invertEquals","addFinalModifier","instanceofPatternMatch","lambdaExpressionFromAnonymousClass","lambdaExpression","switchExpression","tryWithResource","renameFileToType","organizeImports","renameUnusedLocalVariables"]},"scope":"window"},"java.cleanup.actionsOnSave":{"type":"array","deprecationMessage":"Deprecated, please use 'java.cleanup.actions' instead.","default":[],"items":{"type":"string","enum":["qualifyMembers","qualifyStaticMembers","addOverride","addDeprecated","stringConcatToTextBlock","invertEquals","addFinalModifier","instanceofPatternMatch","lambdaExpressionFromAnonymousClass","lambdaExpression","switchExpression","tryWithResource"]},"scope":"window"},"java.saveActions.cleanup":{"type":"boolean","description":"Enable\/disable cleanup actions on save.","default":true},"java.saveActions.organizeImports":{"type":"boolean","default":false,"order":20,"scope":"window","description":"Enable\/disable auto organize imports on save action"},"java.sources.organizeImports.starThreshold":{"type":"integer","default":99,"order":30,"minimum":1,"scope":"window","description":"Specifies the number of imports added before a star-import declaration is used."},"java.sources.organizeImports.staticStarThreshold":{"type":"integer","default":99,"order":40,"minimum":1,"scope":"window","description":"Specifies the number of static imports added before a star-import declaration is used."},"java.refactoring.extract.interface.replace":{"type":"boolean","markdownDescription":"Specify whether to replace all the occurrences of the subtype with the new extracted interface.","default":true},"java.quickfix.showAt":{"type":"string","default":"line","enum":["line","problem"],"scope":"window","description":"Show quickfixes at the problem or line level."}},"order":110,"title":"Code Action"},{"id":"java-codenagivation","properties":{"java.references.includeAccessors":{"type":"boolean","default":true,"order":30,"scope":"window","description":"Include getter, setter and builder\/constructor when finding references."},"java.references.includeDeclarations":{"type":"boolean","default":true,"order":40,"scope":"window","description":"Include declarations when finding references."},"java.references.includeDecompiledSources":{"type":"boolean","default":true,"order":50,"scope":"window","description":"Include the decompiled sources when finding references."},"java.symbols.includeSourceMethodDeclarations":{"type":"boolean","markdownDescription":"Include method declarations from source files in symbol search.","default":false,"scope":"window","order":60},"java.referencesCodeLens.enabled":{"type":"boolean","default":false,"order":10,"scope":"window","description":"Enable\/disable the references code lens."},"java.inlayHints.parameterNames.enabled":{"type":"string","markdownDescription":"Enable\/disable inlay hints for parameter names:\n```java\n\nInteger.valueOf(\/* s: *\/ '123', \/* radix: *\/ 10)\n \n```\n `#java.inlayHints.parameterNames.exclusions#` can be used to disable the inlay hints for methods.","default":"literals","order":80,"enum":["none","literals","all"],"scope":"window","enumDescriptions":["Disable parameter name hints","Enable parameter name hints only for literal arguments","Enable parameter name hints for literal and non-literal arguments"]},"java.search.scope":{"type":"string","markdownDescription":"Specifies the scope which must be used for search operation like \n - Find Reference\n - Call Hierarchy\n - Workspace Symbols","default":"all","order":100,"enum":["all","main"],"scope":"window","enumDescriptions":["Search on all classpath entries including reference libraries and projects.","All classpath entries excluding test classpath entries."]},"java.inlayHints.parameterNames.exclusions":{"type":"array","markdownDescription":"The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:\n - `java.lang.Math.*` - All the methods from java.lang.Math.\n - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.\n - `*.println(*)` - Methods named as 'println'.\n - `(from, to)` - Methods with two parameters named as 'from' and 'to'.\n - `(arg*)` - Methods with one parameter whose name starts with 'arg'.","default":[],"order":90,"items":{"type":"string"},"scope":"window"},"java.implementationCodeLens":{"type":"string","order":20,"default":"none","enumDescriptions":["Disable the implementations code lens","Enable the implementations code lens only for types","Enable the implementations code lens only for methods","Enable the implementations code lens for types and methods"],"enum":["none","types","methods","all"],"scope":"window","description":"Enable\/disable the implementations code lens for the provided categories."},"java.typeHierarchy.lazyLoad":{"type":"boolean","default":false,"order":70,"scope":"window","description":"Enable\/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content."}},"order":120,"title":"Code Navigation"},{"id":"java-others","properties":{"java.eclipse.downloadSources":{"type":"boolean","description":"Enable\/disable download of Maven source artifacts for Eclipse projects.","scope":"window","default":false},"java.contentProvider.preferred":{"type":"string","default":null,"scope":"window","description":"Preferred content provider (a 3rd party decompiler id, usually)"},"java.editor.reloadChangedSources":{"type":"string","markdownDescription":"Specifies whether to reload the sources of the open class files when their source jar files are changed.","default":"ask","enum":["ask","auto","manual"],"scope":"window","enumDescriptions":["Ask to reload the sources of the open class files","Automatically reload the sources of the open class files","Manually reload the sources of the open class files"]},"java.foldingRange.enabled":{"type":"boolean","description":"Enable\/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.","scope":"window","default":true},"java.diagnostic.filter":{"type":"array","default":[],"scope":"window","items":{"type":"string"},"description":"Specifies a list of file patterns for which matching documents should not have their diagnostics reported (eg. '**\/Foo.java')."},"java.selectionRange.enabled":{"type":"boolean","description":"Enable\/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.","scope":"window","default":true},"java.edit.validateAllOpenBuffersOnChanges":{"type":"boolean","markdownDescription":"Specifies whether to recheck all open Java files for diagnostics when editing a Java file.","scope":"window","default":false}},"order":130,"title":"Others"}]